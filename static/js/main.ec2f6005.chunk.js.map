{"version":3,"sources":["components/Home.jsx","components/RandomRecipe.jsx","components/Content.jsx","components/MoreRandoms.jsx","App.js","serviceWorker.js","index.js"],"names":["links","label","path","className","Home","map","link","to","RandomRecipe","state","singleRecipe","fetchRecipes","a","axios","get","process","data","setState","console","log","recipes","this","src","image","alt","title","dishTypes","eachType","diets","eachDiet","Component","Content","history","onClick","push","component","MoreRandoms","randomRecipeArr","randomRecipes","eachRecipe","App","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec2f6005.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst links = [\n  { label: \"My calendar\", path: \"/content/calendar\", className: \"calendar\" },\n  {\n    label: \"Random recipes\",\n    path: \"/content/random\",\n    className: \"randomRecipes\"\n  },\n  {\n    label: \"Search for a recipe\",\n    path: \"/content/search\",\n    className: \"Search\"\n  },\n  {\n    label: \"Lots of Recipes\",\n    path: \"/content/morerandoms\",\n    className: \"lotsOfRandoms\"\n  }\n];\n\nconst Home = () =>\n  links.map(link => (\n    <button className={`${link.className} homeLink`}>\n      <Link to={link.path}>{link.label}</Link>\n    </button>\n  ));\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass RandomRecipe extends Component {\n  state = {\n    singleRecipe: null\n  };\n\n  componentDidMount() {\n    this.fetchRecipes();\n  }\n\n  fetchRecipes = async () => {\n    try {\n      const { data } = await axios.get(\n        `https://api.spoonacular.com/recipes/random?apiKey=${process.env.REACT_APP_SPOON}`\n      );\n      this.setState({ singleRecipe: data });\n      console.log(data.recipes[0]);\n    } catch (e) {\n      console.log(\"Error fetching Recipes\", e);\n    }\n  };\n\n  render() {\n    const { singleRecipe } = this.state;\n    return (\n      <div>\n        <div className=\"randomRecipeCard\">\n          {singleRecipe && (\n            <div>\n              <img src={singleRecipe.recipes[0].image} alt=\"food pics\" />\n              <p>\n                <strong>{singleRecipe.recipes[0].title}</strong>\n              </p>\n              <div className=\"frontLists\">\n                <ul>\n                  <p>\n                    <strong>Dish type</strong>\n                  </p>\n                  {singleRecipe.recipes[0].dishTypes.map(eachType => (\n                    <li>{eachType}</li>\n                  ))}\n                </ul>\n                <ul>\n                  <p>\n                    <strong>Diet type</strong>\n                  </p>\n                  {singleRecipe.recipes[0].diets.map(eachDiet => (\n                    <li>{eachDiet}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          )}\n          <button>Not a fan</button>\n          <button>Save this!</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RandomRecipe;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { RandomRecipe, MoreRandoms } from \".\";\n\nconst Content = ({ history }) => {\n  const handleHomeClick = () => history.push(\"/\");\n  return (\n    <div className=\"mainContent\">\n      <button onClick={handleHomeClick}> Go Back</button>\n      <Route path=\"/content/random\" component={RandomRecipe} />\n      <Route path=\"/content/moreRandoms\" component={MoreRandoms} />\n    </div>\n  );\n};\n\nexport default Content;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass MoreRandoms extends Component {\n  state = {\n    randomRecipeArr: null\n  };\n\n  componentDidMount() {\n    this.randomRecipes();\n  }\n\n  randomRecipes = async () => {\n    try {\n      const { data } = await axios.get(\n        `https://api.spoonacular.com/recipes/random?number=3&apiKey=${process.env.REACT_APP_SPOON}`\n      );\n      this.setState({ randomRecipeArr: data });\n      console.log(data.recipes);\n    } catch (e) {\n      console.log(\"Error fetching Recipes\", e);\n    }\n  };\n\n  render() {\n    const { randomRecipeArr } = this.state;\n    return (\n      <div>\n        {randomRecipeArr &&\n          randomRecipeArr.recipes.map(eachRecipe => (\n            <div className=\"randomRecipeCard\">\n              <div>\n                <img src={eachRecipe.image} alt=\"food pics\" />\n                <p>\n                  <strong>{eachRecipe.title}</strong>\n                </p>\n                <div className=\"frontLists\">\n                  <ul>\n                    <p>\n                      <strong>Dish type</strong>\n                    </p>\n                    {eachRecipe.dishTypes.map(eachType => (\n                      <li>{eachType}</li>\n                    ))}\n                  </ul>\n                  <ul>\n                    <p>\n                      <strong>Diet type</strong>\n                    </p>\n                    {eachRecipe.diets.map(eachDiet => (\n                      <li>{eachDiet}</li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n              <button>Not a fan</button>\n              <button>Save this!</button>\n            </div>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default MoreRandoms;\n","import \"./App.css\";\nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Home, Content } from \"./components\";\n\nconsole.log(process.env);\n\nconst App = () => (\n  <div className=\"App\">\n    <Route path=\"/\" component={Home} exact />\n    <Route path=\"/content\" component={Content} />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}